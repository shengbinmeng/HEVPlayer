//**********************************************
//internal.h
//Unipipy @2011
//internal header
//**********************************************


#ifndef DECODER_INTERNAL_H
#define DECODER_INTERNAL_H

#include <stdint.h>
#include "utils/utils.h"
#include "definition.h"
#include "dsp.h"
#include "bitstream.h"
#include "cabac.h"
#include "codec.h"

static const int LENT_scan8[64+2*16] = //TODO: DC?//copied from encoder
{
	/* Luma */
	 8+1*16,  9+1*16,  8+2*16,  9+2*16, 10+1*16, 11+1*16, 10+2*16, 11+2*16,
	 8+3*16,  9+3*16,  8+4*16,  9+4*16,	10+3*16, 11+3*16, 10+4*16, 11+4*16,
	12+1*16, 13+1*16, 12+2*16, 13+2*16,	14+1*16, 15+1*16, 14+2*16, 15+2*16,
	12+3*16, 13+3*16, 12+4*16, 13+4*16,	14+3*16, 15+3*16, 14+4*16, 15+4*16,
	 8+5*16,  9+5*16,  8+6*16,  9+6*16, 10+5*16, 11+5*16, 10+6*16, 11+6*16,
	 8+7*16,  9+7*16,  8+8*16,  9+8*16,	10+7*16, 11+7*16, 10+8*16, 11+8*16,
	12+5*16, 13+5*16, 12+6*16, 13+6*16,	14+5*16, 15+5*16, 14+6*16, 15+6*16,
	12+7*16, 13+7*16, 12+8*16, 13+8*16,	14+7*16, 15+7*16, 14+8*16, 15+8*16,

	/* Cb */
	2+1*16, 3+1*16, 2+2*16, 3+2*16,
	4+1*16, 5+1*16, 4+2*16, 5+2*16,
	2+3*16, 3+3*16, 2+4*16, 3+4*16,
	4+3*16, 5+3*16, 4+4*16, 5+4*16,

	/* Cr */
	2+6*16, 3+6*16, 2+7*16, 3+7*16,
	4+6*16, 5+6*16, 4+7*16, 5+7*16,
	2+8*16, 3+8*16, 2+9*16, 3+9*16,
	4+8*16, 5+8*16, 4+9*16, 5+9*16,

	/* Luma DC */
	//TODO: ?

	/* Chroma DC */

};
static const int LENT_scan4[256+64*2] = 
{ 

16+ 1*32, 17+ 1*32, 16+ 2*32, 17+ 2*32, 18+ 1*32, 19+ 1*32, 18+ 2*32, 19+ 2*32, 
16+ 3*32, 17+ 3*32, 16+ 4*32, 17+ 4*32, 18+ 3*32, 19+ 3*32, 18+ 4*32, 19+ 4*32, 
20+ 1*32, 21+ 1*32, 20+ 2*32, 21+ 2*32, 22+ 1*32, 23+ 1*32, 22+ 2*32, 23+ 2*32, 
20+ 3*32, 21+ 3*32, 20+ 4*32, 21+ 4*32, 22+ 3*32, 23+ 3*32, 22+ 4*32, 23+ 4*32, 
16+ 5*32, 17+ 5*32, 16+ 6*32, 17+ 6*32, 18+ 5*32, 19+ 5*32, 18+ 6*32, 19+ 6*32, 
16+ 7*32, 17+ 7*32, 16+ 8*32, 17+ 8*32, 18+ 7*32, 19+ 7*32, 18+ 8*32, 19+ 8*32, 
20+ 5*32, 21+ 5*32, 20+ 6*32, 21+ 6*32, 22+ 5*32, 23+ 5*32, 22+ 6*32, 23+ 6*32, 
20+ 7*32, 21+ 7*32, 20+ 8*32, 21+ 8*32, 22+ 7*32, 23+ 7*32, 22+ 8*32, 23+ 8*32, 

24+ 1*32, 25+ 1*32, 24+ 2*32, 25+ 2*32, 26+ 1*32, 27+ 1*32, 26+ 2*32, 27+ 2*32, 
24+ 3*32, 25+ 3*32, 24+ 4*32, 25+ 4*32, 26+ 3*32, 27+ 3*32, 26+ 4*32, 27+ 4*32, 
28+ 1*32, 29+ 1*32, 28+ 2*32, 29+ 2*32, 30+ 1*32, 31+ 1*32, 30+ 2*32, 31+ 2*32, 
28+ 3*32, 29+ 3*32, 28+ 4*32, 29+ 4*32, 30+ 3*32, 31+ 3*32, 30+ 4*32, 31+ 4*32, 
24+ 5*32, 25+ 5*32, 24+ 6*32, 25+ 6*32, 26+ 5*32, 27+ 5*32, 26+ 6*32, 27+ 6*32, 
24+ 7*32, 25+ 7*32, 24+ 8*32, 25+ 8*32, 26+ 7*32, 27+ 7*32, 26+ 8*32, 27+ 8*32, 
28+ 5*32, 29+ 5*32, 28+ 6*32, 29+ 6*32, 30+ 5*32, 31+ 5*32, 30+ 6*32, 31+ 6*32, 
28+ 7*32, 29+ 7*32, 28+ 8*32, 29+ 8*32, 30+ 7*32, 31+ 7*32, 30+ 8*32, 31+ 8*32, 

16+ 9*32, 17+ 9*32, 16+10*32, 17+10*32, 18+ 9*32, 19+ 9*32, 18+10*32, 19+10*32, 
16+11*32, 17+11*32, 16+12*32, 17+12*32, 18+11*32, 19+11*32, 18+12*32, 19+12*32, 
20+ 9*32, 21+ 9*32, 20+10*32, 21+10*32, 22+ 9*32, 23+ 9*32, 22+10*32, 23+10*32, 
20+11*32, 21+11*32, 20+12*32, 21+12*32, 22+11*32, 23+11*32, 22+12*32, 23+12*32, 
16+13*32, 17+13*32, 16+14*32, 17+14*32, 18+13*32, 19+13*32, 18+14*32, 19+14*32, 
16+15*32, 17+15*32, 16+16*32, 17+16*32, 18+15*32, 19+15*32, 18+16*32, 19+16*32, 
20+13*32, 21+13*32, 20+14*32, 21+14*32, 22+13*32, 23+13*32, 22+14*32, 23+14*32, 
20+15*32, 21+15*32, 20+16*32, 21+16*32, 22+15*32, 23+15*32, 22+16*32, 23+16*32, 

24+ 9*32, 25+ 9*32, 24+10*32, 25+10*32, 26+ 9*32, 27+ 9*32, 26+10*32, 27+10*32, 
24+11*32, 25+11*32, 24+12*32, 25+12*32, 26+11*32, 27+11*32, 26+12*32, 27+12*32, 
28+ 9*32, 29+ 9*32, 28+10*32, 29+10*32, 30+ 9*32, 31+ 9*32, 30+10*32, 31+10*32, 
28+11*32, 29+11*32, 28+12*32, 29+12*32, 30+11*32, 31+11*32, 30+12*32, 31+12*32, 
24+13*32, 25+13*32, 24+14*32, 25+14*32, 26+13*32, 27+13*32, 26+14*32, 27+14*32, 
24+15*32, 25+15*32, 24+16*32, 25+16*32, 26+15*32, 27+15*32, 26+16*32, 27+16*32, 
28+13*32, 29+13*32, 28+14*32, 29+14*32, 30+13*32, 31+13*32, 30+14*32, 31+14*32, 
28+15*32, 29+15*32, 28+16*32, 29+16*32, 30+15*32, 31+15*32, 30+16*32, 31+16*32, 


 4+ 1*32,  5+ 1*32,  4+ 2*32,  5+ 2*32, 
 6+ 1*32,  7+ 1*32,  6+ 2*32,  7+ 2*32, 
 4+ 3*32,  5+ 3*32,  4+ 4*32,  5+ 4*32, 
 6+ 3*32,  7+ 3*32,  6+ 4*32,  7+ 4*32, 

 8+ 1*32,  9+ 1*32,  8+ 2*32,  9+ 2*32, 
10+ 1*32, 11+ 1*32, 10+ 2*32, 11+ 2*32, 
 8+ 3*32,  9+ 3*32,  8+ 4*32,  9+ 4*32, 
10+ 3*32, 11+ 3*32, 10+ 4*32, 11+ 4*32, 

 4+ 5*32,  5+ 5*32,  4+ 6*32,  5+ 6*32, 
 6+ 5*32,  7+ 5*32,  6+ 6*32,  7+ 6*32, 
 4+ 7*32,  5+ 7*32,  4+ 8*32,  5+ 8*32, 
 6+ 7*32,  7+ 7*32,  6+ 8*32,  7+ 8*32, 

 8+ 5*32,  9+ 5*32,  8+ 6*32,  9+ 6*32, 
10+ 5*32, 11+ 5*32, 10+ 6*32, 11+ 6*32, 
 8+ 7*32,  9+ 7*32,  8+ 8*32,  9+ 8*32, 
10+ 7*32, 11+ 7*32, 10+ 8*32, 11+ 8*32, 


 4+10*32,  5+10*32,  4+11*32,  5+11*32, 
 6+10*32,  7+10*32,  6+11*32,  7+11*32, 
 4+12*32,  5+12*32,  4+13*32,  5+13*32, 
 6+12*32,  7+12*32,  6+13*32,  7+13*32, 

 8+10*32,  9+10*32,  8+11*32,  9+11*32, 
10+10*32, 11+10*32, 10+11*32, 11+11*32, 
 8+12*32,  9+12*32,  8+13*32,  9+13*32, 
10+12*32, 11+12*32, 10+13*32, 11+13*32, 

 4+14*32,  5+14*32,  4+15*32,  5+15*32, 
 6+14*32,  7+14*32,  6+15*32,  7+15*32, 
 4+16*32,  5+16*32,  4+17*32,  5+17*32, 
 6+16*32,  7+16*32,  6+17*32,  7+17*32, 

 8+14*32,  9+14*32,  8+15*32,  9+15*32, 
10+14*32, 11+14*32, 10+15*32, 11+15*32, 
 8+16*32,  9+16*32,  8+17*32,  9+17*32, 
10+16*32, 11+16*32, 10+17*32, 11+17*32, 
};

static const int32_t LENT_scan4_bottom_line[16]	={170,171,174,175,186,187,190,191,234,235,238,239,250,251,254,255};
static const int32_t LENT_scan4_right_line[16]	={ 85, 87, 93, 95,117,119,125,127,213,215,221,223,245,247,253,255};

static const int32_t LENT_cu_depth_treeidx[6] = { 0, 1, 5, 21, 85, 341 };


static int8_t i_chroma_qp_table[58]=
{
	0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,
	17,18,19,20,21,22,23,24,25,26,27,28,29,29,30,31,32,
	33,33,34,34,35,35,36,36,37,37,38,39,40,41,42,43,44,
	45,46,47,48,49,50,51
};


// for convenience
#define READ_CODE(length, code, name)     (code = get_bits(&h->bs, length))
#define READ_UVLC(        code, name)     (code = get_ue(&h->bs))
#define READ_SVLC(        code, name)     (code = get_se(&h->bs))
#define READ_FLAG(        code, name)     (code = get_1bit(&h->bs))

/////////////////////////////////////////////////////////////////////////////////////////////////
//数据结构
/////////////////////////////////////////////////////////////////////////////////////////////////

typedef void (*LENT_deblock_func_t)( pixel *pix, pixel *judge, int stride, int beta, int tc0 );

typedef struct HEVCDeblockContext{

	LENT_deblock_func_t deblock_luma[2];
	LENT_deblock_func_t deblock_chroma[2];

}HEVCDeblockContext;

typedef struct HEVCPredContext
{
	void (*predict_dc[4])(pixel *src, int i_src);
	void (*predict_v[4])(pixel *src, int i_src);
	void (*predict_h[4])(pixel *src, int i_src);
	void (*predict_planar[4])(pixel *src, int i_src, int i_log2_size, int filter);
	void (*predict_ang[4])(pixel *src, int i_src, int intra_pred_order, int i_log2_size, int filter);
}HEVCPredContext;

#endif